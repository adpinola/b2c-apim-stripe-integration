name: Terraform Plan/Apply
on:
  [workflow_dispatch]

permissions:
  id-token: write
  contents: read
  issues: write

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  TF_VAR_acr_name: ${{ vars.ACR_NAME }}
  TF_VAR_acr_rg: ${{ vars.ACR_RESOURCE_GROUP_NAME }}
  TF_VAR_image_name: ${{ vars.IMAGE_NAME }}
  TF_VAR_stripe_public_key: ${{ vars.STRIPE_PUBLIC_KEY }}
  TF_VAR_stripe_api_key: ${{ secrets.STRIPE_API_KEY }}
  TF_VAR_b2c: ${{ vars.B2C_CONFIG }}
  TF_VAR_backend_scopes: ${{ vars.BACKEND_SCOPES }}

jobs:
  terraform-validate:
    name: 'Terraform Validate/Lint'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Terraform Format
      run: |
          cd infrastructure
          terraform fmt -check
    - name: Terraform Validate
      run: |
        cd infrastructure
        terraform init -backend-config="./default.tfbackend"
        terraform validate

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [terraform-validate]
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
    - name: Terraform Init
      run: |
          cd infrastructure
          terraform init -backend-config="./default.tfbackend"
    - name: Terraform Plan
      id: tf-plan
      run: |
        cd infrastructure
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else
          exit 0
        fi
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: infrastructure/tfplan
    - name: Create Output
      id: tf-plan-string
      run: |
        cd infrastructure
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)

        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: 'Terraform Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    steps:
    - uses: trstringer/manual-approval@v1.9.0
      with:
        secret: ${{ github.TOKEN }}
        approvers: adpinola
        minimum-approvals: 1
        issue-title: "Deployment approve"
        issue-body: "Please approve or deny the deployment"
        exclude-workflow-initiator-as-approver: false
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init -backend-config="./default.tfbackend"
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: infrastructure/tfplan
    - name: Terraform Apply
      run: |
         cd infrastructure
         terraform apply -auto-approve tfplan/tfplan
